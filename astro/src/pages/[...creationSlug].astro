---
import {getCollection} from "astro:content";
import Breadcrumbs from "../components/Breadcrumbs.astro";
import SiteFooter from "../components/SiteFooter.astro";
import SiteHeader from "../components/SiteHeader.astro";
import Close from "../icons/Close.astro";
import BaseLayout from "../layouts/BaseLayout.astro";
import PortableText from "../components/portableText/PortableText.astro";

export async function getStaticPaths() {
    const creations = await getCollection('creations');
    return creations.map((result: any) => ({
        params: {
            creationSlug: result.data.fullSlug,
        },
        props: {
            creation: result.data,
        }
    }))
}

const {creation} = Astro.props;
---

<BaseLayout
        metaTitle={creation.title}
        metaDescription={creation.leading}
        metaImageUrl={creation.featuredImage}
>
  <div class="l-site">
    <SiteHeader/>
    <main>
      <div class="l-constraint">
        <Breadcrumbs items={creation.breadcrumbs} current={creation.title}/>
        <article class="post">
          <header class="post__header">
              {
                  creation.featuredImage && creation.showAsBanner && (
                              <figure class="post__featured-image">
                                <img
                                        src={creation.featuredImage}
                                        alt=""
                                        data-dialog-trigger
                                />
                                <dialog class="image-dialog">
                                  <figure>
                                    <img src={creation.featuredImage} alt=""/>
                                    <button class="image-dialog__close">
                                      <Close/>
                                    </button>
                                  </figure>
                                </dialog>
                              </figure>
                  )
              }
            <div class="post__meta">
              <a href={creation.tag.slug} class="tag">{creation.tag.title}</a>
            </div>
            <h1 class="post__title">{creation.title}</h1>
            <p class="post__leading">{creation.leading}</p>
          </header>
          <div class="post__body | u-rich-text">
            <dl class="details-block">
                {
                    creation.detailsList.map((item: any) => (
                            <div class="details-block__item">
                              <dt class="details-block__term">{item.title}</dt>
                              <dd class="details-block__detail">
                                  {item.isLinked ? (
                                          <a
                                                  href={item.href}
                                                  target="_blank"
                                                  class="details-block__link"
                                          >
                                              {item.subtitle}
                                          </a>
                                  ) : item.subtitle}
                              </dd>
                            </div>
                    ))
                }
            </dl>
            <div class="u-rich-text" >
              <PortableText portableText={creation.body} />
            </div>
          </div>
        </article>
      </div>
    </main>
    <SiteFooter/>
  </div>
</BaseLayout>

<script is:inline>
    // Open image dialog
        const imageDialogTriggers = document.querySelectorAll(
            "[data-dialog-trigger]",
            );

        if (imageDialogTriggers) {
            imageDialogTriggers.forEach((trigger) => {
                if (trigger) {
                    trigger.style.cursor = "pointer";
                    const dialog = trigger.nextElementSibling;

                    if (dialog) {
                        const html = document.querySelector("html");
                        const closeButton = dialog.querySelector("button");
                        trigger.addEventListener("click", () => {
                            html.style.overflowY = "hidden";
                            dialog.showModal();
                            });

                        if (closeButton) {
                            closeButton.addEventListener("click", () => {
                                html.style.overflowY = "initial";
                                dialog.close();
                                });
                            }
                        }
                    } else {
                    return;
                    }
                });
            }
</script>
